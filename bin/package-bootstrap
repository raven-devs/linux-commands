#!/usr/bin/env node

const fs = require('fs');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const child_process = require('node:child_process');
const packageBootstrapConfig = require('./package-bootstrap.config.json');
const { FileLogger } = require('./logger');

/**
 * prerequisite: `gh` cli, `gh auth login` command
 *
 * node bin/package-bootstrap
 */

const { userId, repoId, repoDescription, repoKeywords } = packageBootstrapConfig;
const repoFullName = `${userId}/${repoId}`;
const repoGitUrl = `git@github.com:${userId}/${repoId}.git`;
const binName = '[package-bootstrap]:';

const logger = new FileLogger();

const execCommand = async (command, options, rethrowError = false) => {
  try {
    const { stdout, stderr } = await exec(command, options);
    if (stderr) {
      logger.error(stderr);
    }

    return stdout;
  } catch (error) {
    if (rethrowError) {
      throw error;
    }
    logger.error(error);
    process.exit(1);
  }
};

const initPackage = () => {
  const path = 'package.json';
  const repoScopeName = `@${repoFullName}`;
  const repoHttpUrl = `https://github.com/${userId}/${repoId}`;
  const repoHomepageUrl = `${repoHttpUrl}#readme`;
  const repoBugsUrl = `${repoHttpUrl}/issues`;

  if (!fs.existsSync(path)) {
    logger.error(`${path} does not exist.`);
    process.exit(1);
  }

  const packageRawData = fs.readFileSync(path);
  const packageData = JSON.parse(packageRawData);

  const packageDataUpdated = {
    ...packageData,
    name: repoScopeName,
    version: '0.1.0',
    description: repoDescription,
    keywords: repoKeywords,
    homepage: repoHomepageUrl,
    repository: {
      ...packageData.repository,
      url: repoGitUrl,
    },
    bugs: {
      ...packageData.bugs,
      url: repoBugsUrl,
    },
  };

  const packageDataUpdatedJson = JSON.stringify(packageDataUpdated, null, 2);
  fs.writeFileSync(path, packageDataUpdatedJson);
};

const removeFile = (path) => {
  try {
    if (!fs.existsSync(path)) {
      return;
    }

    fs.rmSync(path);
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const removeDir = (path) => {
  try {
    if (!fs.existsSync(path)) {
      return;
    }

    fs.rmSync(path, { recursive: true });
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const initChangelog = () => {
  const path = 'CHANGELOG.md';

  if (!fs.existsSync(path)) {
    return;
  }

  fs.writeFileSync(path, '');
};

const initTodo = () => {
  const path = 'TODO';

  if (!fs.existsSync(path)) {
    return;
  }

  fs.writeFileSync(path, '');
};

const initReadme = () => {
  const path = 'README.md';

  if (!fs.existsSync(path)) {
    return;
  }

  fs.writeFileSync(path, `# ${repoId}\n`);
};

const initRemoteRepo = async () => {
  try {
    try {
      await execCommand(`gh repo delete ${repoFullName} --yes`, {}, true);
      await logger.log(binName, `remote repo delete ${repoFullName}`, 'done');
    } catch (error) {
      if (error.code === 1) {
        // HTTP 404: Not Found - skip this
      } else {
        logger.error(error);
        process.exit(1);
      }
    }

    await execCommand(`gh repo create ${repoFullName} --public --description "${repoDescription}"`);
    await logger.log(binName, `remote repo create ${repoFullName}`, 'done');
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const initLocalRepo = async () => {
  try {
    await execCommand('rm -rf .git');
    await execCommand('git init');
    await execCommand('git config user.name spetushkou');
    await execCommand('git config user.email sergey.petushkou@gmail.com');
    await execCommand(`git remote add origin ${repoGitUrl}`);
    await execCommand('git checkout -b main');
    await execCommand("git add --all && git commit -m 'chore: init'");
    await execCommand('git push -u origin main');
    await execCommand('git checkout -b develop');
    await execCommand('git push -u origin develop');
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const npmInstall = async () => {
  try {
    const npmInstall = child_process.spawn('npm', ['install']);

    npmInstall.stdout.on('data', function (data) {
      logger.log(JSON.stringify(data.toString()));
      process.stdout.write(data.toString());
    });
    npmInstall.stderr.on('data', function (data) {
      logger.error(JSON.stringify(data.toString()));
      process.stderr.write(data.toString());
    });
    npmInstall.on('close', function (code) {
      process.stdout.end();
      process.stderr.end();
    });
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const main = async () => {
  try {
    await logger.clear();

    if (!userId || !repoId) {
      logger.error('Repo config is not valid.');
      process.exit(1);
    }

    removeFile('bin/git-log');
    removeFile('bin/husky-install');
    removeFile('bin/husky-uninstall');
    // removeFile('bin/logger.js');
    removeFile('bin/package-install');
    removeFile('bin/package-install.config.json');
    removeFile('package-lock.json');
    // removeFile('bin/package-bootstrap');
    // removeFile('bin/package-bootstrap.config.json');

    removeDir('.github');
    removeDir('doc');
    removeDir('node_modules');

    await logger.log(binName, 'prepare a local project', 'done');

    initPackage();
    await logger.log(binName, 'initialize package.json', 'done');

    await npmInstall();
    await logger.log(binName, 'npm install', 'done');

    initChangelog();
    await logger.log(binName, 'initialize CHANGELOG.md', 'done');

    initTodo();
    await logger.log(binName, 'initialize TODO', 'done');

    initReadme();
    await logger.log(binName, 'initialize README.md', 'done');

    await initRemoteRepo();
    await logger.log(binName, 'initialize a remote git repo', 'done');

    await initLocalRepo();
    await logger.log(binName, 'initialize a local git repo', 'done');

    await logger.log(binName, 'successfull');
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

main()
  .then()
  .catch((error) => logger.error(error));
